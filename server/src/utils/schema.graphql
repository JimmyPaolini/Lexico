# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AdjectiveCase {
  ablative: AdjectiveNumber
  accusative: AdjectiveNumber
  dative: AdjectiveNumber
  genitive: AdjectiveNumber
  locative: AdjectiveNumber
  nominative: AdjectiveNumber
  vocative: AdjectiveNumber
}

type AdjectiveForms {
  feminine: AdjectiveCase
  masculine: AdjectiveCase
  neuter: AdjectiveCase
}

type AdjectiveInflection {
  declension: String!
  degree: String!
  other: String!
}

type AdjectiveNumber {
  plural: [String!]
  singular: [String!]
}

type AdverbForms {
  comparative: [String!]
  positive: [String!]
  superlative: [String!]
}

type AdverbInflection {
  degree: String!
  type: String!
}

type Author {
  books: [Book!]
  id: String!
  name: String!
  texts: [Text!]!
}

type Book {
  author: Author!
  id: ID!
  texts: [Text!]!
  title: String!
}

type CustomText {
  id: ID!
  text: String!
  title: String!
  user: User!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Entry {
  bookmarked: Boolean
  etymology: String
  forms: Forms
  id: ID!
  identifiers: [String!]
  inflection: Inflection
  isLatinSearchResult: Boolean
  partOfSpeech: String!
  principalParts: [PrincipalPart!]
  pronunciation: Pronunciation
  translations: [Translation!]
  users: [User!]
  words: [Word!]!
}

union Forms = AdjectiveForms | AdverbForms | NounForms | VerbForms

type Gerund {
  ablative: [String!]
  accusative: [String!]
  dative: [String!]
  genitive: [String!]
}

type Imperative {
  active: ImperativeActive
  passive: ImperativePassive
}

type ImperativeActive {
  future: ImperativeActiveFuture
  present: ImperativePresent
}

type ImperativeActiveFuture {
  plural: ImperativeSecondThird
  singular: ImperativeSecondThird
}

type ImperativePassive {
  future: ImperativePassiveFuture
  present: ImperativePresent
}

type ImperativePassiveFuture {
  plural: ImperativeThird
  singular: ImperativeSecondThird
}

type ImperativePresent {
  plural: ImperativeSecond
  singular: ImperativeSecond
}

type ImperativeSecond {
  second: [String!]
}

type ImperativeSecondThird {
  second: [String!]
  third: [String!]
}

type ImperativeThird {
  third: [String!]
}

type Indicative {
  active: IndicativeTense
  passive: IndicativeTense
}

type IndicativeNumber {
  plural: IndicativePerson
  singular: IndicativePerson
}

type IndicativePerson {
  first: [String!]
  second: [String!]
  third: [String!]
}

type IndicativeTense {
  future: IndicativeNumber
  futurePerfect: IndicativeNumber
  imperfect: IndicativeNumber
  perfect: IndicativeNumber
  pluperfect: IndicativeNumber
  present: IndicativeNumber
}

union Inflection = AdjectiveInflection | AdverbInflection | NounInflection | PrepositionInflection | Uninflected | VerbInflection

type Line {
  id: ID!
  line: String!
  lineLabel: String!
  lineNumber: Float!
  text: Text!
}

type Mutation {
  bookmark(entryId: String!): Boolean!
  comment(comment: String!): Boolean!
  createCustomText(id: String!, text: String!, title: String!): CustomText!
  deleteCustomText(id: String!): Boolean!
  recoverPassword(email: String!): Boolean!
  register(email: String!, password: String!): User!
  resetPassword(password: String!, passwordResetToken: String!): Boolean!
  setSettings(settings: SettingsInput!): Boolean!
  unbookmark(entryId: String!): Boolean!
  unregister: Boolean!
}

type NonFinite {
  infinitive: NonFiniteInfinitive
  participle: NonFiniteParticiple
}

type NonFiniteInfinitive {
  active: NonFinitePresentPerfectFuture
  passive: NonFinitePresentPerfectFuture
}

type NonFiniteParticiple {
  active: NonFinitePresentFuture
  passive: NonFinitePerfectFuture
}

type NonFinitePerfectFuture {
  future: [String!]
  perfect: [String!]
}

type NonFinitePresentFuture {
  future: [String!]
  present: [String!]
}

type NonFinitePresentPerfectFuture {
  future: [String!]
  perfect: [String!]
  present: [String!]
}

type NounForms {
  ablative: NounNumber
  accusative: NounNumber
  dative: NounNumber
  genitive: NounNumber
  locative: NounNumber
  nominative: NounNumber
  vocative: NounNumber
}

type NounInflection {
  declension: String!
  gender: String!
  other: String!
}

type NounNumber {
  plural: [String!]
  singular: [String!]
}

type PrepositionInflection {
  case: String!
  other: String!
}

type PrincipalPart {
  name: String!
  text: [String!]!
}

type Pronunciation {
  classical: PronunciationParts!
  ecclesiastical: PronunciationParts!
  vulgar: PronunciationParts!
}

type PronunciationParts {
  phonemes: String!
  phonemic: String!
  phonetic: String!
}

type Query {
  bookmarks: [Entry!]!
  entries(ids: [String!]!): [Entry!]!
  entry(id: String!): Entry!
  facebook(code: String!): User!
  findText(author: String!, book: String, title: String!): Text!
  getAuthor(id: String!): Author!
  getAuthors: [Author!]!
  getBook(id: String!): Book!
  getBooks: [Book!]!
  getCustomText(id: String!): CustomText!
  getText(id: String!): Text!
  getTextIds: [Text!]!
  getTexts: [Text!]!
  google(code: String!): User!
  listCustomTexts: [CustomText!]!
  login(email: String!, password: String!): User!
  logout: Boolean!
  search(search: String!): [Entry!]!
  searchAuthors(search: String!): [Author!]!
  searchBooks(search: String!): [Book!]!
  searchEnglish(search: String!): [Entry!]!
  searchLatin(search: String!): [Entry!]!
  searchLines(search: String!): [Line!]!
  searchLiterature(search: String!): [Author!]!
  searchTexts(search: String!): [Text!]!
  settings: Settings!
  user: User
  users: [User!]!
  validatePasswordResetToken(passwordResetToken: String!): Boolean!
}

type Settings {
  dictionaryMacronized: Boolean
  fontSize: Float
  formsExpandedDefault: Boolean
  literatureMacronized: Boolean
  theme: String
  translationsExpandedDefault: Boolean
}

input SettingsInput {
  dictionaryMacronized: Boolean = true
  fontSize: Float = 24
  formsExpandedDefault: Boolean = false
  literatureMacronized: Boolean = false
  theme: String = "dark"
  translationsExpandedDefault: Boolean = false
}

type Subjunctive {
  active: SubjunctiveTense
  passive: SubjunctiveTense
}

type SubjunctiveNumber {
  plural: SubjunctivePerson
  singular: SubjunctivePerson
}

type SubjunctivePerson {
  first: [String!]
  second: [String!]
  third: [String!]
}

type SubjunctiveTense {
  imperfect: SubjunctiveNumber
  perfect: SubjunctiveNumber
  pluperfect: SubjunctiveNumber
  present: SubjunctiveNumber
}

type Supine {
  ablative: [String!]
  accusative: [String!]
}

type Text {
  author: Author!
  book: Book
  id: ID!
  lines: [Line!]!
  linesSlice(end: Float = 1.7976931348623157e+308, start: Float = 0): [Line!]
  title: String!
}

type Translation {
  entry: Entry!
  id: ID!
  translation: String!
}

type Uninflected {
  other: String!
}

type User {
  bookmarks: [Entry!]
  createdAt: DateTime!
  customTexts: [CustomText!]
  email: String!
  facebookId: String
  googleId: String
  id: ID!
  settings: Settings
  updatedAt: DateTime!
}

type VerbForms {
  imperative: Imperative
  indicative: Indicative
  nonFinite: NonFinite
  subjunctive: Subjunctive
  verbalNoun: VerbalNoun
}

type VerbInflection {
  conjugation: String!
  other: String!
}

type VerbalNoun {
  gerund: Gerund
  supine: Supine
}

type Word {
  entries: [Entry!]!
  word: String!
}
