name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # database:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #     - name: Download Postgres
  #       run: sudo apt-get update && sudo apt-get install postgresql
  #     - name: Install Dependencies
  #       run: npm install && cd ingestion && npm install
  #     - name: Install Kubernetes
  #       run: sudo apt-get update && sudo apt-get install kubectl
  #     - name: Login Kubernetes
  #       run: mkdir ~/.kube && echo "${{secrets.KUBE_CONFIG}}" > ~/.kube/config
  #     - name: Database Port Forward
  #       run: kubectl port-forward statefulset.apps/database 5432 &
  #     - name: Deploy Database
  #       run: cd ingestion && tsc && node dist/ingestion/src/restore.js ingested

  # server:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #     - name: Get Version
  #       id: package-version
  #       uses: martinbeentjes/npm-get-version-action@master
  #     - name: Login Docker
  #       uses: actions-hub/docker/login@master
  #       env:
  #         DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  #         DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build Server Image
  #       run: >-
  #         DOCKER_BUILDKIT=1 docker build -f server/server.Dockerfile
  #         -t jimmypaolini/lexico-server:${{steps.package-version.outputs.current-version}} .
  #     - name: Push Server Image Version
  #       uses: actions-hub/docker@master
  #       with:
  #         args: push jimmypaolini/lexico-server:${{steps.package-version.outputs.current-version}}
  #     - name: Push Server Image Latest
  #       uses: actions-hub/docker@master
  #       with:
  #         args: push jimmypaolini/lexico-server:latest
  #     - name: Install Kubernetes
  #       run: sudo apt-get update && sudo apt-get install kubectl
  #     - name: Login Kubernetes
  #       run: mkdir ~/.kube && echo "${{secrets.KUBE_CONFIG}}" > ~/.kube/config
  #     - name: Deploy Server
  #       run: kubectl rollout restart deployment server

  web:
    runs-on: macos-latest # I don't like having to switch to macos here but I kept getting typescript(TS2307)/webpack errors on ubuntu
    # needs: database
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
      # - name: Type Check
      #   continue-on-error: true
      #   run: npm install && cd web && npm install && yarn tsc
      - name: Get Version
        id: get-version
        run: >-
          cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g'
      - name: Install Docker
        run: brew cask install docker
      - name: Build Web Image
        run: >-
          DOCKER_BUILDKIT=1 docker build -f web/web.Dockerfile
          -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          -t jimmypaolini/lexico-web:${{steps.get-version.outputs[0]}} .
      - name: Push Web Image Version
        run: >-
          DOCKER_BUILDKIT=1 docker push
          -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          -t jimmypaolini/lexico-web:${{steps.get-version.outputs[0]}}
      - name: Push Web Image Version
        run: >-
          DOCKER_BUILDKIT=1 docker push
          -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          -t jimmypaolini/lexico-web:latest
      - name: Install Kubernetes
        run: brew install kubectl
      - name: Login Kubernetes
        run: mkdir ~/.kube && echo "${{secrets.KUBE_CONFIG}}" > ~/.kube/config
      - name: Deploy Web
        run: kubectl rollout restart deployment web

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [server, web]
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #     - name: Get Version
  #       id: package-version
  #       uses: martinbeentjes/npm-get-version-action@master
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  #       with:
  #         tag_name: ${{steps.package-version.outputs.current-version}}
  #         release_name: ${{steps.package-version.outputs.current-version}}
  #         draft: true
  #         prerelease: false
  #     - name: Publish Release
  #       uses: eregon/publish-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         release_id: ${{steps.create_release.outputs.id}}
