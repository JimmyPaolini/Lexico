name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # database:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #     - name: Download Postgres
  #       run: sudo apt-get update && sudo apt-get install postgresql
  #     - name: Install Dependencies
  #       run: npm install && cd ingestion && npm install
  #     - name: Install Kubernetes
  #       run: sudo apt-get update && sudo apt-get install kubectl
  #     - name: Login Kubernetes
  #       run: mkdir ~/.kube && echo "${{secrets.KUBE_CONFIG}}" > ~/.kube/config
  #     - name: Database Port Forward
  #       run: kubectl port-forward statefulset.apps/database 5432 &
  #     - name: Deploy Database
  #       run: cd ingestion && tsc && node dist/ingestion/src/restore.js ingested

  server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
      - name: Get Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
      - name: Login Docker
        uses: actions-hub/docker/login@master
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      - name: Build Server Image
        if: steps.cache.outputs.cache-hit != 'true'
        run: >-
          DOCKER_BUILDKIT=1 docker build -f server/server.Dockerfile .
          -t jimmypaolini/lexico-server:${{steps.package-version.outputs.current-version}}
          -t jimmypaolini/lexico-server:latest
      - name: Push Server Image
        uses: actions-hub/docker@master
        with:
          args: push jimmypaolini/lexico-server --all-tags
      - name: Install Kubernetes
        run: sudo apt-get update && sudo apt-get install kubectl
      - name: Login Kubernetes
        run: mkdir ~/.kube && echo "${{secrets.KUBE_CONFIG}}" > ~/.kube/config
      - name: Deploy Server
        run: kubectl rollout restart deployment server

  web:
    runs-on: ubuntu-latest
    # needs: database
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
      - name: Get Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
      - name: Login Docker
        uses: actions-hub/docker/login@master
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      - name: Build Web Image
        if: steps.cache.outputs.cache-hit != 'true'
        run: >-
          DOCKER_BUILDKIT=1 docker build -f web/web.Dockerfile .
          -t jimmypaolini/lexico-web:${{steps.package-version.outputs.current-version}}
          -t jimmypaolini/lexico-web:latest
      - name: Push Web Image
        uses: actions-hub/docker@master
        with:
          args: push jimmypaolini/lexico-web --all-tags
      - name: Install Kubernetes
        run: sudo apt-get update && sudo apt-get install kubectl
      - name: Login Kubernetes
        run: mkdir ~/.kube && echo "${{secrets.KUBE_CONFIG}}" > ~/.kube/config
      - name: Deploy Web
        run: kubectl rollout restart deployment web

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [server, web]
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #     - name: Get Version
  #       id: package-version
  #       uses: martinbeentjes/npm-get-version-action@master
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  #       with:
  #         tag_name: ${{steps.package-version.outputs.current-version}}
  #         release_name: ${{steps.package-version.outputs.current-version}}
  #         draft: true
  #         prerelease: false
  #     - name: Publish Release
  #       uses: eregon/publish-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         release_id: ${{steps.create_release.outputs.id}}
